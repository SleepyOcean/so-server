package com.sleepy.file.img.so.so_gallery.generated;

import com.sleepy.file.img.so.so_gallery.SoGallery;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;

import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.sleepy.file.img.so.so_gallery.SoGallery}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedSoGalleryImpl implements SoGallery {

    private String id;
    private String size;
    private String format;
    private String path;
    private String resolution;
    private String description;
    private String title;
    private String tag;
    private Timestamp createTime;
    private Timestamp updateTime;

    protected GeneratedSoGalleryImpl() {
    }

    @Override
    public String getId() {
        return id;
    }

    @Override
    public String getSize() {
        return size;
    }

    @Override
    public String getFormat() {
        return format;
    }

    @Override
    public String getPath() {
        return path;
    }

    @Override
    public String getResolution() {
        return resolution;
    }

    @Override
    public Optional<String> getDescription() {
        return Optional.ofNullable(description);
    }

    @Override
    public String getTitle() {
        return title;
    }

    @Override
    public String getTag() {
        return tag;
    }

    @Override
    public Optional<Timestamp> getCreateTime() {
        return Optional.ofNullable(createTime);
    }

    @Override
    public Optional<Timestamp> getUpdateTime() {
        return Optional.ofNullable(updateTime);
    }

    @Override
    public SoGallery setId(String id) {
        this.id = id;
        return this;
    }

    @Override
    public SoGallery setSize(String size) {
        this.size = size;
        return this;
    }

    @Override
    public SoGallery setFormat(String format) {
        this.format = format;
        return this;
    }

    @Override
    public SoGallery setPath(String path) {
        this.path = path;
        return this;
    }

    @Override
    public SoGallery setResolution(String resolution) {
        this.resolution = resolution;
        return this;
    }

    @Override
    public SoGallery setDescription(String description) {
        this.description = description;
        return this;
    }

    @Override
    public SoGallery setTitle(String title) {
        this.title = title;
        return this;
    }

    @Override
    public SoGallery setTag(String tag) {
        this.tag = tag;
        return this;
    }

    @Override
    public SoGallery setCreateTime(Timestamp createTime) {
        this.createTime = createTime;
        return this;
    }

    @Override
    public SoGallery setUpdateTime(Timestamp updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = " + Objects.toString(getId()));
        sj.add("size = " + Objects.toString(getSize()));
        sj.add("format = " + Objects.toString(getFormat()));
        sj.add("path = " + Objects.toString(getPath()));
        sj.add("resolution = " + Objects.toString(getResolution()));
        sj.add("description = " + Objects.toString(OptionalUtil.unwrap(getDescription())));
        sj.add("title = " + Objects.toString(getTitle()));
        sj.add("tag = " + Objects.toString(getTag()));
        sj.add("createTime = " + Objects.toString(OptionalUtil.unwrap(getCreateTime())));
        sj.add("updateTime = " + Objects.toString(OptionalUtil.unwrap(getUpdateTime())));
        return "SoGalleryImpl " + sj.toString();
    }

    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (!(that instanceof SoGallery)) {
            return false;
        }
        final SoGallery thatSoGallery = (SoGallery) that;
        if (!Objects.equals(this.getId(), thatSoGallery.getId())) {
            return false;
        }
        if (!Objects.equals(this.getSize(), thatSoGallery.getSize())) {
            return false;
        }
        if (!Objects.equals(this.getFormat(), thatSoGallery.getFormat())) {
            return false;
        }
        if (!Objects.equals(this.getPath(), thatSoGallery.getPath())) {
            return false;
        }
        if (!Objects.equals(this.getResolution(), thatSoGallery.getResolution())) {
            return false;
        }
        if (!Objects.equals(this.getDescription(), thatSoGallery.getDescription())) {
            return false;
        }
        if (!Objects.equals(this.getTitle(), thatSoGallery.getTitle())) {
            return false;
        }
        if (!Objects.equals(this.getTag(), thatSoGallery.getTag())) {
            return false;
        }
        if (!Objects.equals(this.getCreateTime(), thatSoGallery.getCreateTime())) {
            return false;
        }
        if (!Objects.equals(this.getUpdateTime(), thatSoGallery.getUpdateTime())) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getSize());
        hash = 31 * hash + Objects.hashCode(getFormat());
        hash = 31 * hash + Objects.hashCode(getPath());
        hash = 31 * hash + Objects.hashCode(getResolution());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getDescription()));
        hash = 31 * hash + Objects.hashCode(getTitle());
        hash = 31 * hash + Objects.hashCode(getTag());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getCreateTime()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getUpdateTime()));
        return hash;
    }
}