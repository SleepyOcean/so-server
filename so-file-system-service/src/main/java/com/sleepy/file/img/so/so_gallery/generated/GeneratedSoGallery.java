package com.sleepy.file.img.so.so_gallery.generated;

import com.sleepy.file.img.so.so_gallery.SoGallery;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.sql.Timestamp;
import java.util.Optional;

/**
 * The generated base for the {@link
 * com.sleepy.file.img.so.so_gallery.SoGallery}-interface representing entities
 * of the {@code so_gallery}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedSoGallery {

    /**
     * This Field corresponds to the {@link SoGallery} field that can be
     * obtained using the {@link SoGallery#getId()} method.
     */
    StringField<SoGallery, String> ID = StringField.create(
            Identifier.ID,
            SoGallery::getId,
            SoGallery::setId,
            TypeMapper.identity(),
            true
    );
    /**
     * This Field corresponds to the {@link SoGallery} field that can be
     * obtained using the {@link SoGallery#getSize()} method.
     */
    StringField<SoGallery, String> SIZE = StringField.create(
            Identifier.SIZE,
            SoGallery::getSize,
            SoGallery::setSize,
            TypeMapper.identity(),
            false
    );
    /**
     * This Field corresponds to the {@link SoGallery} field that can be
     * obtained using the {@link SoGallery#getFormat()} method.
     */
    StringField<SoGallery, String> FORMAT = StringField.create(
            Identifier.FORMAT,
            SoGallery::getFormat,
            SoGallery::setFormat,
            TypeMapper.identity(),
            false
    );
    /**
     * This Field corresponds to the {@link SoGallery} field that can be
     * obtained using the {@link SoGallery#getPath()} method.
     */
    StringField<SoGallery, String> PATH = StringField.create(
            Identifier.PATH,
            SoGallery::getPath,
            SoGallery::setPath,
            TypeMapper.identity(),
            false
    );
    /**
     * This Field corresponds to the {@link SoGallery} field that can be
     * obtained using the {@link SoGallery#getResolution()} method.
     */
    StringField<SoGallery, String> RESOLUTION = StringField.create(
            Identifier.RESOLUTION,
            SoGallery::getResolution,
            SoGallery::setResolution,
            TypeMapper.identity(),
            false
    );
    /**
     * This Field corresponds to the {@link SoGallery} field that can be
     * obtained using the {@link SoGallery#getTitle()} method.
     */
    StringField<SoGallery, String> TITLE = StringField.create(
            Identifier.TITLE,
            SoGallery::getTitle,
            SoGallery::setTitle,
            TypeMapper.identity(),
            false
    );
    /**
     * This Field corresponds to the {@link SoGallery} field that can be
     * obtained using the {@link SoGallery#getDescription()} method.
     */
    StringField<SoGallery, String> DESCRIPTION = StringField.create(
            Identifier.DESCRIPTION,
            o -> OptionalUtil.unwrap(o.getDescription()),
            SoGallery::setDescription,
            TypeMapper.identity(),
            false
    );
    /**
     * This Field corresponds to the {@link SoGallery} field that can be
     * obtained using the {@link SoGallery#getTag()} method.
     */
    StringField<SoGallery, String> TAG = StringField.create(
            Identifier.TAG,
            o -> OptionalUtil.unwrap(o.getTag()),
            SoGallery::setTag,
            TypeMapper.identity(),
            false
    );
    /**
     * This Field corresponds to the {@link SoGallery} field that can be
     * obtained using the {@link SoGallery#getCreateTime()} method.
     */
    ComparableField<SoGallery, Timestamp, Timestamp> CREATE_TIME = ComparableField.create(
            Identifier.CREATE_TIME,
            SoGallery::getCreateTime,
            SoGallery::setCreateTime,
            TypeMapper.identity(),
            false
    );
    /**
     * This Field corresponds to the {@link SoGallery} field that can be
     * obtained using the {@link SoGallery#getUploadTime()} method.
     */
    ComparableField<SoGallery, Timestamp, Timestamp> UPLOAD_TIME = ComparableField.create(
            Identifier.UPLOAD_TIME,
            SoGallery::getUploadTime,
            SoGallery::setUploadTime,
            TypeMapper.identity(),
            false
    );

    /**
     * Returns the id of this SoGallery. The id field corresponds to the
     * database column dev.dev.so_gallery.id.
     *
     * @return the id of this SoGallery
     */
    String getId();

    /**
     * Returns the size of this SoGallery. The size field corresponds to the
     * database column dev.dev.so_gallery.size.
     *
     * @return the size of this SoGallery
     */
    String getSize();

    /**
     * Returns the format of this SoGallery. The format field corresponds to the
     * database column dev.dev.so_gallery.format.
     *
     * @return the format of this SoGallery
     */
    String getFormat();

    /**
     * Returns the path of this SoGallery. The path field corresponds to the
     * database column dev.dev.so_gallery.path.
     *
     * @return the path of this SoGallery
     */
    String getPath();

    /**
     * Returns the resolution of this SoGallery. The resolution field
     * corresponds to the database column dev.dev.so_gallery.resolution.
     *
     * @return the resolution of this SoGallery
     */
    String getResolution();

    /**
     * Returns the title of this SoGallery. The title field corresponds to the
     * database column dev.dev.so_gallery.title.
     *
     * @return the title of this SoGallery
     */
    String getTitle();

    /**
     * Returns the description of this SoGallery. The description field
     * corresponds to the database column dev.dev.so_gallery.description.
     *
     * @return the description of this SoGallery
     */
    Optional<String> getDescription();

    /**
     * Returns the tag of this SoGallery. The tag field corresponds to the
     * database column dev.dev.so_gallery.tag.
     *
     * @return the tag of this SoGallery
     */
    Optional<String> getTag();

    /**
     * Returns the createTime of this SoGallery. The createTime field
     * corresponds to the database column dev.dev.so_gallery.create_time.
     *
     * @return the createTime of this SoGallery
     */
    Timestamp getCreateTime();

    /**
     * Returns the uploadTime of this SoGallery. The uploadTime field
     * corresponds to the database column dev.dev.so_gallery.upload_time.
     *
     * @return the uploadTime of this SoGallery
     */
    Timestamp getUploadTime();

    /**
     * Sets the id of this SoGallery. The id field corresponds to the database
     * column dev.dev.so_gallery.id.
     *
     * @param id to set of this SoGallery
     * @return this SoGallery instance
     */
    SoGallery setId(String id);

    /**
     * Sets the size of this SoGallery. The size field corresponds to the
     * database column dev.dev.so_gallery.size.
     *
     * @param size to set of this SoGallery
     * @return this SoGallery instance
     */
    SoGallery setSize(String size);
    
    /**
     * Sets the format of this SoGallery. The format field corresponds to the
     * database column dev.dev.so_gallery.format.
     *
     * @param format to set of this SoGallery
     * @return this SoGallery instance
     */
    SoGallery setFormat(String format);
    
    /**
     * Sets the path of this SoGallery. The path field corresponds to the
     * database column dev.dev.so_gallery.path.
     *
     * @param path to set of this SoGallery
     * @return this SoGallery instance
     */
    SoGallery setPath(String path);
    
    /**
     * Sets the resolution of this SoGallery. The resolution field corresponds
     * to the database column dev.dev.so_gallery.resolution.
     *
     * @param resolution to set of this SoGallery
     * @return this SoGallery instance
     */
    SoGallery setResolution(String resolution);

    /**
     * Sets the title of this SoGallery. The title field corresponds to the
     * database column dev.dev.so_gallery.title.
     *
     * @param title to set of this SoGallery
     * @return this SoGallery instance
     */
    SoGallery setTitle(String title);

    /**
     * Sets the description of this SoGallery. The description field corresponds
     * to the database column dev.dev.so_gallery.description.
     *
     * @param description to set of this SoGallery
     * @return this SoGallery instance
     */
    SoGallery setDescription(String description);

    /**
     * Sets the tag of this SoGallery. The tag field corresponds to the database
     * column dev.dev.so_gallery.tag.
     *
     * @param tag to set of this SoGallery
     * @return this SoGallery instance
     */
    SoGallery setTag(String tag);

    /**
     * Sets the createTime of this SoGallery. The createTime field corresponds
     * to the database column dev.dev.so_gallery.create_time.
     *
     * @param createTime to set of this SoGallery
     * @return this SoGallery instance
     */
    SoGallery setCreateTime(Timestamp createTime);

    /**
     * Sets the uploadTime of this SoGallery. The uploadTime field corresponds
     * to the database column dev.dev.so_gallery.upload_time.
     *
     * @param uploadTime to set of this SoGallery
     * @return this SoGallery instance
     */
    SoGallery setUploadTime(Timestamp uploadTime);

    enum Identifier implements ColumnIdentifier<SoGallery> {

        ID("id"),
        SIZE("size"),
        FORMAT("format"),
        PATH("path"),
        RESOLUTION("resolution"),
        TITLE("title"),
        DESCRIPTION("description"),
        TAG("tag"),
        CREATE_TIME("create_time"),
        UPLOAD_TIME("upload_time");

        private final String columnId;
        private final TableIdentifier<SoGallery> tableIdentifier;

        Identifier(String columnId) {
            this.columnId = columnId;
            this.tableIdentifier = TableIdentifier.of(getDbmsId(),
                    getSchemaId(),
                    getTableId());
        }

        @Override
        public String getDbmsId() {
            return "dev";
        }
        
        @Override
        public String getSchemaId() {
            return "dev";
        }
        
        @Override
        public String getTableId() {
            return "so_gallery";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<SoGallery> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}